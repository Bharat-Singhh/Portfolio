pipeline {
    agent { 
        node {
            label 'docker-agent-007' // Ensure this label matches the correct Jenkins agent
        }
    }
    
    triggers {
        pollSCM('* * * * *') // Adjust polling frequency based on your needs
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning the repository..."
                git branch: 'main', 
                    url: 'https://github.com/Bharat-Singhh/Portfolio.git' // Replace with your repository URL
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                script {
                    sh 'docker build -t india0/portfolio-site:latest .'
                }
            }
        }
        
        stage('Run Docker Container') {
            steps {
                echo "Running the Docker container..."
                sh 'docker run -d -p 80:80 india0/portfolio-site:latest'
            }
        }
        
        stage('Test Application') {
            steps {
                echo "Testing the application..."
                script {
                    try {
                        // Perform tests such as checking the app's response
                        sh '''
                        sleep 5
                        curl -f http://localhost:8080
                        '''
                        echo "✅ Application is running successfully!"
                    } catch (Exception e) {
                        error "❌ Application test failed! Check the logs for more details."
                    } finally {
                        // Ensure the container is stopped after testing
                        sh '''
                        docker stop my-portfolio-app || true
                        docker rm my-portfolio-app || true
                        '''
                    }
                }
            }
        }
        
        stage('Deliver') {
            steps {
                echo "Delivering the application..."
                sh '''
                echo "Deployment or other delivery steps can be added here."
                '''
            }
        }
    }
    
    post {
        always {
            echo "Cleaning up Docker resources..."
            sh '''
            docker system prune -f --filter "until=24h"
            '''
            cleanWs()
        }
        success {
            echo "✅ Pipeline completed successfully!"
        }
        failure {
            echo "❌ Pipeline failed. Check the logs for details."
        }
    }
}
