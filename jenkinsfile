pipeline {
    agent any
    environment {
        // Name of the Docker image
        DOCKER_IMAGE = "my-web-app"

        // Build version: combination of branch name and build number
        BUILD_VERSION = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}"

        // DockerHub (or private registry) credentials ID in Jenkins
        REGISTRY_CREDENTIALS = 'dockerhub-creds' // CHANGE THIS to your Jenkins credentials ID for DockerHub

        // Your Docker registry username
        DOCKER_REGISTRY = 'india007' // CHANGE THIS to your DockerHub username
    }

    stages {
        stage('Validate Pipeline Environment') {
            steps {
                // Validate required tools
                sh 'docker --version'
                sh 'curl --version'
            }
        }

        stage('Clone Repository') {
            steps {
                git branch: 'main',  // CHANGE THIS if your branch is not 'main'
                    url: 'https://github.com/Bharat-Singhh/Portfolio.git', // CHANGE THIS to your repository URL
            }
        }

        stage('Code Linting') {
            steps {
                // Install and run linting tool for HTML files
                sh """
                npm install -g htmlhint
                htmlhint app/*.html
                """
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build and tag Docker image
                    sh """
                    docker build -t ${DOCKER_IMAGE}:${BUILD_VERSION} .
                    docker tag ${DOCKER_IMAGE}:${BUILD_VERSION} ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                script {
                    try {
                        // Run the Docker container for testing
                        sh """
                        docker run -d -p 8080:80 \
                            --name test-container \
                            ${DOCKER_IMAGE}:${BUILD_VERSION}
                        """
                        
                        // Wait for the container to start and perform a test request
                        sleep 5
                        sh "curl --retry 3 --retry-delay 5 -f http://localhost:8080"
                    } finally {
                        // Cleanup the test container
                        sh 'docker stop test-container || true'
                        sh 'docker rm test-container || true'
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: REGISTRY_CREDENTIALS,  // DockerHub credentials
                        usernameVariable: 'DOCKER_USERNAME', 
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        // Log in to DockerHub and push the image
                        sh """
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                        docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_VERSION}
                        docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up old Docker artifacts and workspace
            sh 'docker system prune -f --filter "until=24h"'
            cleanWs()
        }
        success {
            echo "✅ Pipeline succeeded! Build Version: ${BUILD_VERSION}"
        }
        failure {
            echo "❌ Pipeline failed! Check logs for details."
        }
    }
}
