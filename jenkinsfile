pipeline {
    agent { 
        node {
            label 'docker-agent-python'
            customWorkspace "/var/jenkins/workspace/${JOB_NAME}"  
        }
    }
    
    environment {
        DOCKER_REGISTRY = "bharat-singhh"
        DOCKER_IMAGE = "portfolio-site"
        K8S_NAMESPACE = "portfolio-app"
        REPO_URL = "https://github.com/Bharat-Singhh/Portfolio.git"
        BUILD_VERSION = "${env.BUILD_ID}-${GIT_COMMIT.take(8)}"  
        KUBECONFIG = credentials('kubeconfig')
    }

    parameters {
        string(name: 'DEPLOY_ENV', defaultValue: 'staging', description: 'Deployment environment')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Execute test stage')
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo "üì¶ Cloning ${REPO_URL}"
                git branch: 'main', url: "${REPO_URL}", credentialsId: 'github-ssh'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ Building Docker Image (v${BUILD_VERSION})"
                script {
                    sh """
                    docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_VERSION} \\
                                 -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest .
                    """
                }
            }
        }

        stage('Quality Checks') {
            when { expression { params.RUN_TESTS } }
            steps {
                echo "üîç Running Security Scan"
                script {
                    sh "docker scan ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_VERSION}"
                }
            }
        }

        stage('Test Deployment') {
            when { expression { params.RUN_TESTS } }
            steps {
                echo "üß™ Testing Application"
                script {
                    try {
                        sh """
                        docker run --rm -d --name portfolio-test \\
                            -p 8080:80 \\
                            ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_VERSION}
                        sleep 10
                        curl -sSf http://localhost:8080/healthcheck
                        """
                    } finally {
                        sh 'docker rm -f portfolio-test || true'
                    }
                }
            }
        }

        stage('Push to Registry') {
            steps {
                echo "üöÄ Publishing Artifact"
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'docker-hub-creds',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )]) {
                        sh """
                        docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
                        docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_VERSION}
                        docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:latest
                        """
                    }
                }
            }
        }

        stage('Generate Manifests') {
            steps {
                echo "üìÑ Generating Kubernetes Resources"
                script {
                    writeFile file: 'k8s/namespace.yaml', text: """
                    apiVersion: v1
                    kind: Namespace
                    metadata:
                      name: ${K8S_NAMESPACE}
                      labels:
                        env: ${params.DEPLOY_ENV}
                    """
                    
                    writeFile file: 'k8s/deployment.yaml', text: """
                    apiVersion: apps/v1
                    kind: Deployment
                    metadata:
                      name: portfolio-deployment
                      namespace: ${K8S_NAMESPACE}
                      annotations:
                        jenkins/build: "${BUILD_VERSION}"
                    spec:
                      strategy:
                        rollingUpdate:
                          maxSurge: 25%
                          maxUnavailable: 25%
                        type: RollingUpdate
                      replicas: 3
                      selector:
                        matchLabels:
                          app: portfolio
                      template:
                        metadata:
                          labels:
                            app: portfolio
                            env: ${params.DEPLOY_ENV}
                        spec:
                          containers:
                          - name: portfolio
                            image: ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BUILD_VERSION}
                            ports:
                            - containerPort: 80
                            resources:
                              requests:
                                memory: "64Mi"
                                cpu: "50m"
                              limits:
                                memory: "128Mi"
                                cpu: "100m"
                            livenessProbe:
                              httpGet:
                                path: /healthcheck
                                port: 80
                              initialDelaySeconds: 5
                              periodSeconds: 10
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo "üö¢ Deploying to ${params.DEPLOY_ENV}"
                script {
                    dir('k8s') {
                        sh """
                        kubectl apply -f namespace.yaml --validate=true
                        kubectl apply -f deployment.yaml --validate=true
                        kubectl rollout status deployment/portfolio-deployment -n ${K8S_NAMESPACE} --timeout=120s
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Success! Deployment complete in ${currentBuild.durationString}"
            slackSend color: 'good', message: "‚úÖ ${JOB_NAME} v${BUILD_VERSION} deployed to ${params.DEPLOY_ENV}"
        }
        failure {
            echo "‚ùå Pipeline failed after ${currentBuild.durationString}"
            slackSend color: 'danger', message: "‚ö†Ô∏è ${JOB_NAME} failed in stage: ${currentBuild.result}"
            script {
                sh "kubectl rollout undo deployment/portfolio-deployment -n ${K8S_NAMESPACE}"
            }
        }
        cleanup {
            echo "üßπ Cleaning workspace"
            sh "docker system prune -f"
            deleteDir()
        }
    }
}